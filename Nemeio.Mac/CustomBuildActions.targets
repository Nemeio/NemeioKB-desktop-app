<!-- All msbuild target logic needs to be inside a project tag -->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- These targets will fire after mmp creates your bundle but before code signing -->
	<PropertyGroup>
	    <CreateAppBundleDependsOn>$(CreateAppBundleDependsOn);CopyOurFiles;CopyConfigurator;CopyFirmware</CreateAppBundleDependsOn>
	</PropertyGroup>

	<!-- Since this has inputs/outputs, it will fire only when the inputs are changed or the output does not exist -->
	<Target Name="CopyOurFiles" Inputs="../Nemeio.Api/Nemeio.Api.xml" Outputs="$(AppBundleDir)/Contents/MonoBundle/Nemeio.Api.xml">
		<Message Text="This is us copying a file into resources!" />
		<!-- This could have easily been done w/ a built in build action, but you can extend it arbitrary. -->
	    <Copy SourceFiles="../Nemeio.Api/Nemeio.Api.xml" DestinationFiles="$(AppBundleDir)/Contents/MonoBundle/Nemeio.Api.xml" />
	</Target>

	<!-- This is done here because pipeline not execute CustomCommands -->
	<Target Name="CopyConfigurator">
		<Message Text="We copy the contents of the configurator to Nemeio.app" />
		<ItemGroup>
			<ConfiguratorDir Include="$(TargetDir)/Configurator/**/*.*"/>
		</ItemGroup>
	    <Copy SourceFiles="@(ConfiguratorDir)" DestinationFolder="$(AppBundleDir)/Contents/Configurator/%(RecursiveDir)" SkipUnchangedFiles="true" />
	</Target>

	<!-- This is done here because pipeline not execute CustomCommands -->
	<Target Name="CopyFirmware">
		<Message Text="We copy the contents of the fimrware to Nemeio.app" />
		<ItemGroup>
			<FirmwaresDir Include="$(TargetDir)/Firmwares/**/*.*"/>
		</ItemGroup>
	    <Copy SourceFiles="@(FirmwaresDir)" DestinationFolder="$(AppBundleDir)/Contents/Firmwares/%(RecursiveDir)" SkipUnchangedFiles="true" />
	</Target>
</Project>
